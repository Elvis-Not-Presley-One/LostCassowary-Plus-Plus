#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <stdexcept>
#include <cstdio>
#include <zlib.h>



using namespace std;
using namespace nbt; // Use the nbt namespace for libnbt++

struct ChunkLocation {
    int offset;
    int size;
};

struct BlockInfo {
    int x, y, z;
    vector<string> messages;
};

// Function to read a file into a vector of characters
vector<char> readFile(const string& filename) {
    ifstream file(filename, ios::binary);
    if (!file.is_open()) {
        throw runtime_error("Failed to open file: " + filename);
    }
    return vector<char>((istreambuf_iterator<char>(file)), istreambuf_iterator<char>());
}

// Function to decompress a chunk using zlib
vector<char> decompressChunk(const vector<char>& data) {
    z_stream zs;
    zs.zalloc = Z_NULL;
    zs.zfree = Z_NULL;
    zs.opaque = Z_NULL;
    zs.next_in = const_cast<Bytef*>(reinterpret_cast<const Bytef*>(data.data()));
    zs.avail_in = static_cast<uInt>(data.size());

    int ret = inflateInit(&zs);
    if (ret != Z_OK) {
        throw runtime_error("inflateInit failed");
    }

    vector<char> outBuffer(1024 * 1024); // Example buffer size
    zs.next_out = reinterpret_cast<Bytef*>(outBuffer.data());
    zs.avail_out = outBuffer.size();

    ret = inflate(&zs, Z_FINISH);
    if (ret != Z_STREAM_END) {
        inflateEnd(&zs);
        throw runtime_error("inflate failed");
    }

    inflateEnd(&zs);
    outBuffer.resize(zs.total_out);

    return outBuffer;
}

// Function to parse the header of the region file and get chunk locations
vector<ChunkLocation> parseHeader(const vector<char>& data) {
    vector<ChunkLocation> chunkLocations;
    for (int i = 0; i < 4096; i += 4) {
        int offset = (static_cast<unsigned char>(data[i]) << 16) |
                     (static_cast<unsigned char>(data[i + 1]) << 8) |
                     static_cast<unsigned char>(data[i + 2]);
        int size = static_cast<unsigned char>(data[i + 3]);
        chunkLocations.push_back({ offset * 4096, size * 4096 });
    }
    return chunkLocations;
}

// Function to parse NBT data and extract block information
vector<BlockInfo> parseNBTData(const vector<char>& data) {
    vector<BlockInfo> blocks;

    istringstream inputStream(string(data.begin(), data.end()), ios::binary);
    nbt::NBT nbtData;
    nbtData.load(inputStream);

    auto root = nbtData.getRoot();
    if (!root) {
        throw runtime_error("Failed to parse NBT data");
    }

    auto level = root->get<nbt::CompoundTag>("Level");
    if (!level) {
        throw runtime_error("Failed to find 'Level' tag");
    }

    auto tileEntities = level->get<nbt::ListTag>("TileEntities");
    if (!tileEntities) {
        throw runtime_error("Failed to find 'TileEntities' tag");
    }

    for (const auto& entity : *tileEntities) {
        auto entityCompound = entity->asCompound();
        if (!entityCompound) continue;

        auto id = entityCompound->get<nbt::StringTag>("id");
        if (!id || id->getValue() != "minecraft:sign") continue;

        BlockInfo blockInfo;
        blockInfo.x = entityCompound->get<nbt::IntTag>("x")->getValue();
        blockInfo.y = entityCompound->get<nbt::IntTag>("y")->getValue();
        blockInfo.z = entityCompound->get<nbt::IntTag>("z")->getValue();

        for (int j = 0; j < 4; j++) {
            string textTag = "Text" + to_string(j + 1);
            auto text = entityCompound->get<nbt::StringTag>(textTag);
            if (text) {
                blockInfo.messages.push_back(text->getValue());
            }
        }
        blocks.push_back(blockInfo);
    }

    return blocks;
}

int main() {
    try {
        string filename = "r.0.0.mca";
        cout << "Reading file: " << filename << endl;
        vector<char> data = readFile(filename);
        cout << "File read successfully. Size: " << data.size() << " bytes" << endl;

        vector<ChunkLocation> chunkLocations = parseHeader(data);
        cout << "Parsed " << chunkLocations.size() << " chunk locations" << endl;

        ofstream outputFile("all_chunk_data.dat", ios::binary);
        if (!outputFile.is_open()) {
            throw runtime_error("Failed to open output file");
        }
        cout << "Output file opened successfully" << endl;

        vector<BlockInfo> allBlocks;
        for (const auto& chunkLocation : chunkLocations) {
            if (chunkLocation.offset == 0 || chunkLocation.size == 0) continue;

            cout << "Processing chunk at offset " << chunkLocation.offset << " with size " << chunkLocation.size << endl;
            vector<char> chunkData(data.begin() + chunkLocation.offset, data.begin() + chunkLocation.offset + chunkLocation.size);
            
            vector<char> decompressedData = decompressChunk(chunkData);
            cout << "Decompressed chunk. Decompressed size: " << decompressedData.size() << " bytes" << endl;
            
            vector<BlockInfo> blocks = parseNBTData(decompressedData);
            allBlocks.insert(allBlocks.end(), blocks.begin(), blocks.end());
        }

        for (const auto& block : allBlocks) {
            outputFile << "Block at [X=" << block.x << ", Y=" << block.y << ", Z=" << block.z << "]:\n";
            for (const auto& message : block.messages) {
                outputFile << "  " << message << "\n";
            }
        }

        outputFile.close();
        cout << "All chunk and NBT data saved to 'all_chunk_data.dat'" << endl;

    } catch (const exception& e) {
        cerr << "Error: " << e.what() << endl;
        return -1;
    }

    return 0;
}
